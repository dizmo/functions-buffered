{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","require","buffered","fn","ms","id","bn","args","Promise","resolve","clearTimeout","setTimeout","apply","cancel","decorator","arg","key","tpd","_decorator","tgt","default"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA;AACAC,QAAQ,gBAAR;AACA;;;;;;;;;;;;;AAaA,SAASC,QAAT,CAAkBC,EAAlB,EAA+B;AAC7B;AAAA,QADoBC,EACpB,uEADyB,GACzB;;AACE,QAAIC,WAAJ;AACA,QAAMC,KAAK,SAALA,EAAK,GAAmB;AAAA;;AAAA,0CAANC,IAAM;AAANA,gBAAM;AAAA;;AAC1B,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5BC,yBAAaL,EAAb;AACAA,iBAAKM,WAAW;AAAA,uBAAMF,QAAQN,GAAGS,KAAH,CAAS,KAAT,EAAeL,IAAf,CAAR,CAAN;AAAA,aAAX,EAAgDH,EAAhD,CAAL;AACH,SAHM,CAAP;AAIH,KALD;AAMAE,OAAGO,MAAH,GAAY,YAAM;AACdH,qBAAaL,EAAb;AACH,KAFD;AAGA,WAAOC,EAAP;AACH;AACDP,QAAQG,QAAR,GAAmBA,QAAnB;AACA,SAASY,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6BC,GAA7B,EAAkC;AAC9B,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AACzB,eAAOG,WAAWH,GAAX,CAAP;AACH,KAFD,MAGK;AACD,eAAOG,aAAaH,GAAb,EAAkBC,GAAlB,EAAuBC,GAAvB,CAAP;AACH;AACJ;AACDlB,QAAQe,SAAR,GAAoBA,SAApB;AACA,SAASI,UAAT,CAAoBd,EAApB,EAAwB;AACpB,WAAO,UAACe,GAAD,EAAMH,GAAN,EAAWC,GAAX,EAAmB;AACtB,YAAIA,GAAJ,EAAS;AACLA,gBAAIjB,KAAJ,GAAYE,SAASe,IAAIjB,KAAb,EAAoBI,EAApB,CAAZ;AACA,mBAAOa,GAAP;AACH,SAHD,MAIK;AACDE,gBAAIH,GAAJ,IAAWd,SAASiB,IAAIH,GAAJ,CAAT,EAAmBZ,EAAnB,CAAX;AACH;AACJ,KARD;AASH;AACDL,QAAQqB,OAAR,GAAkBlB,QAAlB","file":"index.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* tslint:disable:trailing-comma */\nrequire(\"babel-polyfill\");\n/**\n * Returns a buffered and cancelable version for the provided function.\n *\n * The buffered function does *not* get invoked before the specified delay in\n * milliseconds passes, no matter have many times it gets invoked in between.\n * Also upon the invocation of the *actual* function a promise is returned.\n * Further, it is also possible to *cancel* a particular invocation before the\n * delay passes.\n *\n * @param fn an arbitrary function\n * @param ms delay in milliseconds\n * @returns a buffered function\n */\nfunction buffered(fn, ms = 200 // tslint:disable-line:ban-types\n) {\n    let id;\n    const bn = function (...args) {\n        return new Promise((resolve) => {\n            clearTimeout(id);\n            id = setTimeout(() => resolve(fn.apply(this, args)), ms);\n        });\n    };\n    bn.cancel = () => {\n        clearTimeout(id);\n    };\n    return bn;\n}\nexports.buffered = buffered;\nfunction decorator(arg, key, tpd) {\n    if (typeof arg === \"number\") {\n        return _decorator(arg);\n    }\n    else {\n        return _decorator()(arg, key, tpd);\n    }\n}\nexports.decorator = decorator;\nfunction _decorator(ms) {\n    return (tgt, key, tpd) => {\n        if (tpd) {\n            tpd.value = buffered(tpd.value, ms);\n            return tpd;\n        }\n        else {\n            tgt[key] = buffered(tgt[key], ms);\n        }\n    };\n}\nexports.default = buffered;\n"]}