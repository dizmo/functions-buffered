{"version":3,"sources":["buffered.js"],"names":["Object","defineProperty","exports","value","buffered","fn","ms","id","bn","args","Promise","resolve","clearTimeout","setTimeout","apply","cancel","default"],"mappings":"AAAA;AACA;AACA;AACA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA;;;;;;;;;;;;;AAaA,SAASC,QAAT,CAAkBC,EAAlB,EAAgC;AAAA,QAAVC,EAAU,uEAAL,GAAK;;AAC5B,QAAIC,WAAJ;AACA,QAAMC,KAAK,SAALA,EAAK,GAAmB;AAAA;;AAAA,0CAANC,IAAM;AAANA,gBAAM;AAAA;;AAC1B,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5BC,yBAAaL,EAAb;AACAA,iBAAKM,WAAW;AAAA,uBAAMF,QAAQN,GAAGS,KAAH,CAAS,KAAT,EAAeL,IAAf,CAAR,CAAN;AAAA,aAAX,EAAgDH,EAAhD,CAAL;AACH,SAHM,CAAP;AAIH,KALD;AAMAE,OAAGO,MAAH,GAAY,YAAM;AACdH,qBAAaL,EAAb;AACH,KAFD;AAGA,WAAOC,EAAP;AACH;AACDN,QAAQE,QAAR,GAAmBA,QAAnB;AACAF,QAAQc,OAAR,GAAkBZ,QAAlB","file":"buffered.js","sourcesContent":["\"use strict\";\n/* tslint:disable:ban-types */\n/* tslint:disable:callable-types */\n/* tslint:disable:trailing-comma */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns a buffered and cancelable version for the provided function.\n *\n * The buffered function does *not* get invoked,   before the specified\n * delay in milliseconds passes,  no matter how much it gets invoked in\n * between. Also upon the invocation of the *actual* function a promise\n * is returned.  Further,  it is also possible to *cancel* a particular\n * invocation before the delay passes.\n *\n * @param fn an arbitrary function\n * @param ms delay in milliseconds\n * @returns a buffered function\n */\nfunction buffered(fn, ms = 200) {\n    let id;\n    const bn = function (...args) {\n        return new Promise((resolve) => {\n            clearTimeout(id);\n            id = setTimeout(() => resolve(fn.apply(this, args)), ms);\n        });\n    };\n    bn.cancel = () => {\n        clearTimeout(id);\n    };\n    return bn;\n}\nexports.buffered = buffered;\nexports.default = buffered;\n"]}