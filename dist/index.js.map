{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;AACA;;AACA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C,EAAE,OAAO,IAAT,EAA7C;AACA;;;;;;;;;;;;;AAaA,SAAS,QAAT,CAAkB,EAAlB,EAAgC;AAAA,QAAV,EAAU,uEAAL,GAAK;;AAC5B,QAAI,WAAJ;AACA,QAAM,KAAK,SAAL,EAAK,GAAkB;AAC3B;AAAA;;AAAA,0CADsB,IACtB;AADsB,gBACtB;AAAA;;AACE,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC5B,yBAAa,EAAb;AACA,iBAAK,WAAW;AAAA,uBAAM,QAAQ,GAAG,KAAH,CAAS,KAAT,EAAe,IAAf,CAAR,CAAN;AAAA,aAAX,EAAgD,EAAhD,CAAL;AACH,SAHM,CAAP;AAIH,KAND;AAOA,OAAG,MAAH,GAAY,YAAM;AACd,qBAAa,EAAb;AACH,KAFD;AAGA,WAAO,EAAP;AACH;AACD,QAAQ,QAAR,GAAmB,QAAnB;AACA,QAAQ,OAAR,GAAkB,QAAlB","file":"index.js","sourcesContent":["\"use strict\";\n/* tslint:disable:ban-types */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns a buffered and cancelable version for the provided function.\n *\n * The buffered function does *not* get invoked before the specified delay in\n * milliseconds passes, no matter have many times it gets invoked in between.\n * Also upon the invocation of the *buffering* function a promise is returned.\n * Further, it is also possible to *cancel* a particular invocation before the\n * delay passes.\n *\n * @param fn an arbitrary function\n * @param ms delay in milliseconds\n * @returns a buffered function (returning a promise)\n */\nfunction buffered(fn, ms = 200) {\n    let id;\n    const bn = function (...args // tslint:disable-line:trailing-comma\n    ) {\n        return new Promise((resolve) => {\n            clearTimeout(id);\n            id = setTimeout(() => resolve(fn.apply(this, args)), ms);\n        });\n    };\n    bn.cancel = () => {\n        clearTimeout(id);\n    };\n    return bn;\n}\nexports.buffered = buffered;\nexports.default = buffered;\n"]}