{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","buffered","fn","ms","arguments","length","undefined","id","bn","_this","_len","args","Array","_key","Promise","resolve","clearTimeout","setTimeout","apply","cancel","default"],"mappings":"AAAA;AACA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA;;;;;;;;;;;;;AAaA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AAClB,QAAIC,KAAKC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,GAA7E;;AAEA,QAAIG,KAAK,KAAK,CAAd;AACA,QAAIC,KAAK,SAASA,EAAT,GAAc;AACvB;AACI,YAAIC,QAAQ,IAAZ;;AAEA,aAAK,IAAIC,OAAON,UAAUC,MAArB,EAA6BM,OAAOC,MAAMF,IAAN,CAApC,EAAiDG,OAAO,CAA7D,EAAgEA,OAAOH,IAAvE,EAA6EG,MAA7E,EAAqF;AACjFF,iBAAKE,IAAL,IAAaT,UAAUS,IAAV,CAAb;AACH;;AAED,eAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AAClCC,yBAAaT,EAAb;AACAA,iBAAKU,WAAW,YAAY;AACxB,uBAAOF,QAAQb,GAAGgB,KAAH,CAAST,KAAT,EAAgBE,IAAhB,CAAR,CAAP;AACH,aAFI,EAEFR,EAFE,CAAL;AAGH,SALM,CAAP;AAMH,KAdD;AAeAK,OAAGW,MAAH,GAAY,YAAY;AACpBH,qBAAaT,EAAb;AACH,KAFD;AAGA,WAAOC,EAAP;AACH;AACDT,QAAQE,QAAR,GAAmBA,QAAnB;AACAF,QAAQqB,OAAR,GAAkBnB,QAAlB;AACA;AACA","file":"index.js","sourcesContent":["\"use strict\";\n/* tslint:disable:ban-types */\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns a buffered and cancelable version for the provided function.\n *\n * The buffered function does *not* get invoked before the specified delay in\n * milliseconds passes, no matter have many times it gets invoked in between.\n * Also upon the invocation of the *buffering* function a promise is returned.\n * Further, it is also possible to *cancel* a particular invocation before the\n * delay passes.\n *\n * @param fn an arbitrary function\n * @param ms delay in milliseconds\n * @returns a buffered function (returning a promise)\n */\nfunction buffered(fn) {\n    var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n\n    var id = void 0;\n    var bn = function bn() // tslint:disable-line:trailing-comma\n    {\n        var _this = this;\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return new Promise(function (resolve) {\n            clearTimeout(id);\n            id = setTimeout(function () {\n                return resolve(fn.apply(_this, args));\n            }, ms);\n        });\n    };\n    bn.cancel = function () {\n        clearTimeout(id);\n    };\n    return bn;\n}\nexports.buffered = buffered;\nexports.default = buffered;\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map"]}